// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

model User {
  id                 String      @id @default(uuid())
  name               String
  email              String   @unique
  password           String
  role               Role
  phone              String?  
  address            String?
  profile            String?
  bio String?
  isVerified         Boolean  @default(false)
  verificationToken  String? 
  refreshToken       String?  
  resetPasswordToken String?  
  resetPasswordExpires DateTime? 
  createdAt          DateTime @default(now())
  products             Product[]
  reviews Review[]
  orders Order[]
}

enum Role {
  CUSTOMER
  SELLER
  ADMIN
  COURIER
}

model Product {
  id         String     @id @default(uuid())
  nama       String     
  harga      Int
  stok       Int
  warna      String    
  deskripsi  String     
  kategori   Category[]
  imageUrl   String[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  seller     User      @relation(fields: [sellerId], references: [id])
  sellerId   String
  reviews Review[]
  orders Order[]
}  

enum Category {
  ELEKTRONIK
  MAINAN
  ALAT_SEKOLAH
  AKSESORIS
}

model Review {
  id String @id @default(uuid())
  rating Int
  comment String
  user User @relation(fields: [userId], references: [id])
  userId String
  product Product @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Order {
  id        String   @id @default(uuid())
  user    User    @relation(fields: [userId], references: [id])
  userId    String
  product Product @relation(fields: [productId], references: [id])
  productId String
  status    OrderStatus @default(PENDING)
  total     Int
  createdAt DateTime @default(now())
  notification Notification[]
}

enum OrderStatus {
  PENDING   
  PAID   
  SHIPPED  
  DELIVERED 
  CANCELED 
}

model Notification {
  id        String   @id @default(uuid())
  order   Order   @relation(fields: [orderId], references: [id])
  orderId   String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

